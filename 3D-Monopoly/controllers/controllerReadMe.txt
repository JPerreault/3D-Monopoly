Author: Scott Hoffman

The heart of authentication is located in passport.js. For this project I used a library called Passport which made it fairly easy to do authentication and session creating. The authentication is done with the initial setup in passport.use, which then decides the 'strategy' of how authentication will be handled. If a user's username and password matches in this function then it will pass it back to the login function in post.js(which is where it's called from) and then use req.logIn which is a function that comes with the Passport library. This function generates a login session for the user in the req.user variable which I can now call anywhere that I want data from that user, such as their username. The advantage of this library is that it allowed me to quickly setup both authentication and sessions without creating a lot of extra code dedicated to both of these features.

The other file in this directory, api.js, is a vitally important part of the application. It is essentially the main controller that handles interactions between the client/views and model/db. Basically anytime the client needs data from the db or needs to update its data in the db it goes through a function in this file. All of the db calls and updates in this file are done using Mongoose's object oriented syntax which should be familiar to anyone with object oriented experience. The exported model is used to search the db initially, but in the callback of that search it will return a user variable that contains the resulting document from the search(or nothing if it failed). All of the calls here are used in the routes and the callbacks in these functions are located in the respective routes from where they are called initially.